from collections import defaultdict
from discord.ui import Button
import discord

skip_votes = defaultdict(set)


# –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞ —Ç—Ä–µ–∫–∞
class SkipButton(Button):
    def __init__(self):
        super().__init__(label="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", style=discord.ButtonStyle.gray, emoji='‚è≠')
        self.callback = self.button_callback

    async def button_callback(self, interaction):
        await self.button_handler(interaction)

    @staticmethod
    async def button_handler(interaction):
        """–ü—Ä–æ–ø—É—Å–∫–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —Ç—Ä–µ–∫"""
        if not interaction.user.voice:
            return await interaction.response.send_message('–¢—ã –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –≥–æ–ª–æ—Å–æ–≤–æ–º –∫–∞–Ω–∞–ª–µ', ephemeral=True)

        guild_id = interaction.guild.id
        skip_votes[guild_id].add(interaction.user.id)
        channel = interaction.user.voice.channel
        voice_client = interaction.guild.voice_client
        total_members = len(channel.members)

        if voice_client:
            if len(skip_votes[guild_id]) / total_members >= 0.4:
                voice_client.stop()
                return await interaction.response.send_message('–¢—Ä–µ–∫ –ø—Ä–æ–ø—É—â–µ–Ω')

            return await interaction.response.send_message(
                f'–¢—ã –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª –∑–∞ –ø—Ä–æ–ø—É—Å–∫ —Ç—Ä–µ–∫–∞. –û—Å—Ç–∞–ª–æ—Å—å –≥–æ–ª–æ—Å–æ–≤ {round(total_members * 0.4)}', ephemeral=True
            )

        await interaction.reponse.send_message('–°–µ–π—á–∞—Å –Ω–∏—á–µ–≥–æ –Ω–µ –∏–≥—Ä–∞–µ—Ç')


# –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ—á–µ—Ä–µ–¥–∏ —Ç—Ä–µ–∫–æ–≤
class QueueButton(Button):
    def __init__(self, queue_function, queues):
        super().__init__(label="–û—á–µ—Ä–µ–¥—å", style=discord.ButtonStyle.gray, emoji='üéµ')
        self.queue_function = queue_function
        self.queues = queues
        self.callback = self.button_callback

    async def button_callback(self, interaction):
        await self.button_handler(interaction, self.queues)

    @staticmethod
    async def button_handler(interaction, queues):
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ç–µ–∫—É—â—É—é –æ—á–µ—Ä–µ–¥—å"""
        guild_id = interaction.guild.id

        if queues.get(guild_id):
            formatted_queue = "\n".join(
                [f'{index + 1}. {query["title"]}' for index, query in enumerate(queues[guild_id])])
            message = f'–°–ª–µ–¥—É—é—â–∏–µ —Ç—Ä–µ–∫–∏:\n{formatted_queue}'
            return await interaction.response.send_message(message)

        await interaction.response.send_message('–û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞')


# –ö–Ω–æ–ø–∫–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Ç—Ä–µ–∫–∞ –∏–∑ –æ—á–µ—Ä–µ–¥–∏
class RemoveButton(Button):
    def __init__(self, queues, track_info):
        super().__init__(label='–£–¥–∞–ª–∏—Ç—å', style=discord.ButtonStyle.gray, emoji='‚ùå')
        self.queues = queues
        self.track_info = track_info
        self.callback = self.button_callback

    async def button_callback(self, interaction):
        if interaction.user != self.track_info['ctx'].author:
            return await interaction.response.send_message(
                '–¢—ã –Ω–µ –º–æ–∂–µ—à—å —É–¥–∞–ª—è—Ç—å —Ç—Ä–µ–∫–∏, –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –¥—Ä—É–≥–∏–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏'
            )

        if (not self.queues[interaction.guild.id]
                or not [track for track in self.queues[interaction.guild.id]][0] == self.track_info):
            return await interaction.response.send_message(f'–¢—Ä–µ–∫ {self.track_info["title"]} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –æ—á–µ—Ä–µ–¥–∏')

        self.queues[interaction.guild.id].remove(self.track_info)
        return await interaction.response.send_message(f'–¢—Ä–µ–∫ {self.track_info["title"]} –±—ã–ª —É–¥–∞–ª–µ–Ω –∏–∑ –æ—á–µ—Ä–µ–¥–∏')
