import asyncio
from collections import defaultdict
import os
import re
from typing import Optional
import dotenv
import discord
from discord.ext import commands
from discord.commands.context import ApplicationContext
from discord.webhook import WebhookMessage
import yt_dlp
from buttons import SkipButton, QueueButton, RemoveButton, SearchResultSelect
from handlers import skip_handler, queue_handler, skip_votes
from models import TrackInfo

# –ó–∞–≥—Ä—É–∂–∞–µ–º .env
dotenv.load_dotenv()

token = os.getenv("DISCORD_TOKEN")
if not token:
    raise ValueError("DISCORD_TOKEN environment variable is not set or empty.")

# –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –±–æ—Ç–∞
intents = discord.Intents.default()
intents.message_content = True
intents.voice_states = True
bot = commands.Bot(intents=intents)

# –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–µ–æ —Å YouTube
ydl_opts = {
    "quiet": True,
    "noplaylist": True,
    "format": "bestaudio/best",
    "postprocessors": [
        {
            "key": "FFmpegExtractAudio",
            "preferredcodec": "mp3",
            "preferredquality": "192",
        }
    ],
}

# –û–±—ä–µ–∫—Ç YoutubeDL —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
ydl = yt_dlp.YoutubeDL(ydl_opts)

# –û—á–µ—Ä–µ–¥—å –º—É–∑—ã–∫–∏
queues = defaultdict(list)

# –°–µ–º–∞—Ñ–æ—Ä—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞ —Å–æ–∑–¥–∞—é—Ç—Å—è –ø–æ –º–µ—Ä–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
guild_semaphore = defaultdict(lambda: asyncio.Semaphore(1))

# –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ –∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è
NOT_VIDEO_URL_RE = re.compile(
    r"^(?:https?://)?(?:www\.)?(youtube.com|youtu.be)/?$"
)
VIDEO_URL_RE = re.compile(
    r"^(?:https?://)?(?:www\.)?(?:youtu\.be/|youtube\.com/(?:embed/|v/|watch\?v=|watch\?.+&v=))([\w-]{11})$"
)


@bot.event
async def on_ready() -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è on_ready –¥–ª—è –±–æ—Ç–∞.

    –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∏ —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞ –ø—Ä–∏ –µ–≥–æ –∑–∞–ø—É—Å–∫–µ.
    """
    activity = discord.Game(name="Detroit: Become Human")
    await bot.change_presence(status=discord.Status.do_not_disturb, activity=activity)
    print("Bot is online!")


@bot.slash_command(name="play")
async def play(ctx: ApplicationContext, *, query: str) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã play –¥–ª—è –±–æ—Ç–∞.

    Parameters:
        ctx (ApplicationContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç –∫–æ–º–∞–Ω–¥—ã.
        query (str): –ó–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏–ª–∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è —Ç—Ä–µ–∫–∞.
    """
    if not ctx.author.voice:
        await ctx.respond("–¢—ã –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –≥–æ–ª–æ—Å–æ–≤–æ–º –∫–∞–Ω–∞–ª–µ", ephemeral=True)
        return

    await ctx.respond("–î—É–º–∞—é –Ω–∞–¥ –æ—Ç–≤–µ—Ç–æ–º ü§î")

    try:
        track_added_message = await enqueue(ctx, query)
        if not track_added_message:
            return
    except (
        yt_dlp.utils.DownloadError,
        yt_dlp.utils.ExtractorError,
        yt_dlp.utils.UnsupportedError,
    ):
        await ctx.respond("–í–≤–µ–¥–µ–Ω–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Å—ã–ª–∫–∞")
        return

    guild_id = ctx.guild_id
    semaphore = guild_semaphore[guild_id]
    async with semaphore:
        if not queues[guild_id]:
            return
        await play_queue(ctx, track_added_message)


async def enqueue(ctx: ApplicationContext, query: str) -> Optional[WebhookMessage]:
    """
    –î–æ–±–∞–≤–ª—è–µ—Ç —Ç—Ä–µ–∫ –≤ –æ—á–µ—Ä–µ–¥—å –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è.

    Parameters:
        ctx (ApplicationContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç –≤—ã–∑–æ–≤–∞ –∫–æ–º–∞–Ω–¥—ã.
        query (str): –ó–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏–ª–∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è —Ç—Ä–µ–∫–∞.

    Returns:
        Optional[WebhookMessage]: –°–æ–æ–±—â–µ–Ω–∏–µ –æ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç—Ä–µ–∫–∞ –≤ –æ—á–µ—Ä–µ–¥—å, –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –Ω–∞–π–¥–µ–Ω–æ. None, –µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.

    Raises:
        yt_dlp.utils.UnsupportedError: –ï—Å–ª–∏ –≤–≤–µ–¥–µ–Ω–∞ —Å—Å—ã–ª–∫–∞ –Ω–∞ YouTube, –∞ –Ω–µ –Ω–∞ –≤–∏–¥–µ–æ.
    """
    with ydl:
        if bool(NOT_VIDEO_URL_RE.match(query)):
            raise yt_dlp.utils.UnsupportedError(
                "ERROR: –í–≤–µ–¥–µ–Ω–∞ —Å—Å—ã–ª–∫–∞ –Ω–∞ YouTube, –∞ –Ω–µ –Ω–∞ –≤–∏–¥–µ–æ —Å –Ω–µ–≥–æ"
            )
        if bool(VIDEO_URL_RE.match(query)):
            info = await asyncio.to_thread(
                lambda: ydl.extract_info(query, download=False)
            )
            audio_url = info["url"]
            title = info["title"]
        else:
            info = await asyncio.to_thread(
                lambda: ydl.extract_info(f"ytsearch5:{query}", download=False)
            )
            entries = info.get("entries") or []
            if not entries:
                await ctx.followup.send("–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–µ–ª –ø–æ —Ç–≤–æ–µ–º—É –∑–∞–ø—Ä–æ—Å—É")
                return

            future: asyncio.Future = asyncio.get_running_loop().create_future()
            select = SearchResultSelect(entries[:5], future)
            view = discord.ui.View()
            view.add_item(select)
            await ctx.followup.send("–í—ã–±–µ—Ä–∏—Ç–µ —Ç—Ä–µ–∫:", view=view, ephemeral=True)
            try:
                choice = await asyncio.wait_for(future, timeout=30)
            except asyncio.TimeoutError:
                await ctx.followup.send("–í—Ä–µ–º—è –≤—ã–±–æ—Ä–∞ –∏—Å—Ç–µ–∫–ª–æ", ephemeral=True)
                return

            audio_url = choice["url"]
            title = choice["title"]

    track_info = TrackInfo(url=audio_url, title=title, author=ctx.author)
    queues[ctx.guild_id].append(track_info)

    view = discord.ui.View(timeout=None)
    view.add_item(RemoveButton(queues, track_info))
    return await ctx.followup.send(f"–¢—Ä–µ–∫: {title} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å", view=view)


async def play_queue(
    ctx: ApplicationContext, track_added_message: WebhookMessage
) -> None:
    """
    –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç —Ç—Ä–µ–∫ –∏–∑ –æ—á–µ—Ä–µ–¥–∏.

    Parameters:
        ctx (ApplicationContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç –≤—ã–∑–æ–≤–∞ –∫–æ–º–∞–Ω–¥—ã.
        track_added_message (WebhookMessage): –°–æ–æ–±—â–µ–Ω–∏–µ, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ –æ—Ç–≤–µ—Ç–∏—Ç—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º–æ–º —Ç—Ä–µ–∫–µ.
    """
    guild_id = ctx.guild.id

    track = queues[guild_id].pop(0)

    if not ctx.voice_client:
        try:
            await ctx.author.voice.channel.connect()
        except (discord.ClientException, discord.Forbidden):
            await track_added_message.reply(
                "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –≥–æ–ª–æ—Å–æ–≤–æ–º—É –∫–∞–Ω–∞–ª—É. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –±–æ—Ç–∞. –¢—Ä–µ–∫ –Ω–µ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å."
            )
            if ctx.voice_client:
                await ctx.voice_client.disconnect()
            if not queues[guild_id] and guild_id in guild_semaphore:
                del guild_semaphore[guild_id]
            return

    ctx.voice_client.play(
        discord.FFmpegPCMAudio(
            track.url,
            before_options="-reconnect 1 -reconnect_streamed 1 -reconnect_delay_max 5 -vn",
        )
    )

    view = discord.ui.View(timeout=None)
    view.add_item(SkipButton())
    view.add_item(QueueButton(queues))
    await track_added_message.reply(f"–°–µ–π—á–∞—Å –∏–≥—Ä–∞–µ—Ç: {track.title}", view=view)

    while ctx.voice_client.is_playing():
        await asyncio.sleep(1)

    if skip_votes[guild_id]:
        del skip_votes[guild_id]

    if not queues[guild_id]:
        await ctx.send("–í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –í—ã—Ö–æ–¥ –∏–∑ –∫–∞–Ω–∞–ª–∞")
        await ctx.voice_client.disconnect()
        del guild_semaphore[guild_id]


@bot.slash_command(name="skip", description="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ç–µ–∫—É—â–∏–π —Ç—Ä–µ–∫")
async def skip(ctx: ApplicationContext) -> None:
    """
    –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ —Ç—Ä–µ–∫–∞.

    Parameters:
        ctx (ApplicationContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
    """
    await skip_handler(ctx.interaction)


@bot.slash_command(name="queue", description="–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–µ–∫—É—â—É—é –æ—á–µ—Ä–µ–¥—å")
async def queue(ctx: ApplicationContext) -> None:
    """
    –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç–µ–∫—É—â–µ–π –æ—á–µ—Ä–µ–¥–∏.

    Parameters:
        ctx (ApplicationContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
    """
    await queue_handler(ctx.interaction, queues)


# –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞, –µ—Å–ª–∏ —Ç–æ–∫–µ–Ω –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç
bot.run(token)
